name: Hive - Generic
on:
  schedule:
    - cron: "15 02 * * *"
  workflow_dispatch:
    # Note: We're limited to 10 inputs
    inputs:
      client:
        type: string
        default: '"go-ethereum","reth","nethermind","ethereumjs","nimbus-el","besu","erigon"'
        description: Comma-separated list of clients to test .e.g go-ethereum, besu, reth, nethermind, erigon, ethereumjs, nimbus-el
      simulator:
        type: string
        default: >-
          "devp2p",
          "ethereum/consensus",
          "ethereum/eest/consume-engine",
          "ethereum/eest/consume-rlp",
          "ethereum/engine",
          "ethereum/graphql",
          "ethereum/rpc-compat",
          "ethereum/sync"
        description: Comma-separated list of simulators to test .e.g ethereum/rpc-compat, ethereum/eest/consume-engine, ethereum/eest/consume-rlp
      hive_version:
        type: string
        default: ethereum/hive@master
        description: GitHub repository and tag for hive (repo@tag)
      client_versions:
        type: string
        default: |
          {
            "geth": "ethereum/go-ethereum@master",
            "besu": "hyperledger/besu@main",
            "reth": "paradigmxyz/reth@main",
            "nethermind": "NethermindEth/nethermind@master",
            "erigon": "erigontech/erigon@main",
            "ethereumjs": "ethereumjs/ethereumjs-monorepo@master",
            "nimbusel": "status-im/nimbus-eth1@master"
          }
        description: 'JSON object containing client versions in format {"client": "repo@tag", ...}'

env:
  # Proxy
  GOPROXY: "${{ vars.GOPROXY }}"
  # Hive action environment variables
  S3_BUCKET: hive-results
  S3_PATH: generic
  S3_PUBLIC_URL: https://hive.ethpandaops.io/generic
  INSTALL_RCLONE_VERSION: v1.68.2
  EEST_BUILD_ARG_FIXTURES: https://github.com/ethereum/execution-spec-tests/releases/download/v4.5.0/fixtures_develop.tar.gz
  EEST_BUILD_ARG_BRANCH: v4.5.0
  # Flags used for all simulators
  GLOBAL_EXTRA_FLAGS: >-
    --client.checktimelimit=180s
    --sim.parallelism=4
    --docker.auth
    --docker.buildoutput
  # Flags used for the ethereum/eest/consume-engine simulator
  EEST_ENGINE_FLAGS: >-
    --sim.buildarg fixtures=${EEST_BUILD_ARG_FIXTURES}
    --sim.buildarg branch=${EEST_BUILD_ARG_BRANCH}
    --sim.loglevel=3
  # Flags used for the ethereum/eest/consume-rlp simulator
  EEST_RLP_FLAGS: >-
    --sim.buildarg fixtures=${EEST_BUILD_ARG_FIXTURES}
    --sim.buildarg branch=${EEST_BUILD_ARG_BRANCH}
    --sim.loglevel=3
  # Flags used for the ethereum/rpc-compat simulator
  RPC_COMPAT_FLAGS: >-
    --sim.loglevel=3
  # Flags used for the ethereum/consensus simulator
  CONSENSUS_FLAGS: >-
    --sim.limit=consensus/

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      # Hive version
      hive_repo: ${{ steps.parse.outputs.hive_repo }}
      hive_tag: ${{ steps.parse.outputs.hive_tag }}
      # Versions of the clients
      geth_repo: ${{ steps.parse.outputs.geth_repo }}
      geth_tag: ${{ steps.parse.outputs.geth_tag }}
      geth_docker_image_tag: ${{ steps.parse.outputs.geth_docker_image_tag }}
      besu_repo: ${{ steps.parse.outputs.besu_repo }}
      besu_tag: ${{ steps.parse.outputs.besu_tag }}
      besu_docker_image_tag: ${{ steps.parse.outputs.besu_docker_image_tag }}
      reth_repo: ${{ steps.parse.outputs.reth_repo }}
      reth_tag: ${{ steps.parse.outputs.reth_tag }}
      reth_docker_image_tag: ${{ steps.parse.outputs.reth_docker_image_tag }}
      nethermind_repo: ${{ steps.parse.outputs.nethermind_repo }}
      nethermind_tag: ${{ steps.parse.outputs.nethermind_tag }}
      nethermind_docker_image_tag: ${{ steps.parse.outputs.nethermind_docker_image_tag }}
      erigon_image: ${{ steps.parse.outputs.erigon_image }}
      erigon_tag: ${{ steps.parse.outputs.erigon_tag }}
      erigon_docker_image_tag: ${{ steps.parse.outputs.erigon_docker_image_tag }}
      ethereumjs_repo: ${{ steps.parse.outputs.ethereumjs_repo }}
      ethereumjs_tag: ${{ steps.parse.outputs.ethereumjs_tag }}
      ethereumjs_docker_image_tag: ${{ steps.parse.outputs.ethereumjs_docker_image_tag }}
      nimbusel_repo: ${{ steps.parse.outputs.nimbusel_repo }}
      nimbusel_tag: ${{ steps.parse.outputs.nimbusel_tag }}
      nimbusel_docker_image_tag: ${{ steps.parse.outputs.nimbusel_docker_image_tag }}
      # client_config contains the YAML client config for Hive
      client_config: ${{ steps.client_config.outputs.config }}
    steps:
      - id: parse
        run: |
          # Default client versions
          GETH_DEFAULT="ethereum/go-ethereum@master"
          BESU_DEFAULT="hyperledger/besu@main"
          RETH_DEFAULT="paradigmxyz/reth@main"
          NETHERMIND_DEFAULT="NethermindEth/nethermind@master"
          ERIGON_DEFAULT="erigontech/erigon@main"
          ETHEREUMJS_DEFAULT="ethereumjs/ethereumjs-monorepo@master"
          NIMBUSEL_DEFAULT="status-im/nimbus-eth1@master"
          HIVE_DEFAULT="ethereum/hive@master"

          # Parse client versions from JSON or use defaults
          CLIENT_VERSIONS='${{ inputs.client_versions }}'
          if [ -n "$CLIENT_VERSIONS" ]; then
            GETH_VERSION=$(echo "$CLIENT_VERSIONS" | jq -r '.geth // "'"$GETH_DEFAULT"'"')
            BESU_VERSION=$(echo "$CLIENT_VERSIONS" | jq -r '.besu // "'"$BESU_DEFAULT"'"')
            RETH_VERSION=$(echo "$CLIENT_VERSIONS" | jq -r '.reth // "'"$RETH_DEFAULT"'"')
            NETHERMIND_VERSION=$(echo "$CLIENT_VERSIONS" | jq -r '.nethermind // "'"$NETHERMIND_DEFAULT"'"')
            ERIGON_VERSION=$(echo "$CLIENT_VERSIONS" | jq -r '.erigon // "'"$ERIGON_DEFAULT"'"')
            ETHEREUMJS_VERSION=$(echo "$CLIENT_VERSIONS" | jq -r '.ethereumjs // "'"$ETHEREUMJS_DEFAULT"'"')
            NIMBUSEL_VERSION=$(echo "$CLIENT_VERSIONS" | jq -r '.nimbusel // "'"$NIMBUSEL_DEFAULT"'"')
          else
            GETH_VERSION="$GETH_DEFAULT"
            BESU_VERSION="$BESU_DEFAULT"
            RETH_VERSION="$RETH_DEFAULT"
            NETHERMIND_VERSION="$NETHERMIND_DEFAULT"
            ERIGON_VERSION="$ERIGON_DEFAULT"
            ETHEREUMJS_VERSION="$ETHEREUMJS_DEFAULT"
            NIMBUSEL_VERSION="$NIMBUSEL_DEFAULT"
          fi

          # Parse geth
          echo "geth_repo=$(echo ${GETH_VERSION} | cut -d@ -f1)" >> $GITHUB_OUTPUT
          echo "geth_tag=$(echo ${GETH_VERSION} | cut -d@ -f2)" >> $GITHUB_OUTPUT
          echo "geth_docker_image_tag=$(echo ${GETH_VERSION} | sed 's/[@\/]/_/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

          # Parse besu
          echo "besu_repo=$(echo ${BESU_VERSION} | cut -d@ -f1)" >> $GITHUB_OUTPUT
          echo "besu_tag=$(echo ${BESU_VERSION} | cut -d@ -f2)" >> $GITHUB_OUTPUT
          echo "besu_docker_image_tag=$(echo ${BESU_VERSION} | sed 's/[@\/]/_/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

          # Parse reth
          echo "reth_repo=$(echo ${RETH_VERSION} | cut -d@ -f1)" >> $GITHUB_OUTPUT
          echo "reth_tag=$(echo ${RETH_VERSION} | cut -d@ -f2)" >> $GITHUB_OUTPUT
          echo "reth_docker_image_tag=$(echo ${RETH_VERSION} | sed 's/[@\/]/_/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

          # Parse nethermind
          echo "nethermind_repo=$(echo ${NETHERMIND_VERSION} | cut -d@ -f1)" >> $GITHUB_OUTPUT
          echo "nethermind_tag=$(echo ${NETHERMIND_VERSION} | cut -d@ -f2)" >> $GITHUB_OUTPUT
          echo "nethermind_docker_image_tag=$(echo ${NETHERMIND_VERSION} | sed 's/[@\/]/_/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

          # Parse erigon
          echo "erigon_repo=$(echo ${ERIGON_VERSION} | cut -d@ -f1)" >> $GITHUB_OUTPUT
          echo "erigon_tag=$(echo ${ERIGON_VERSION} | cut -d@ -f2)" >> $GITHUB_OUTPUT
          echo "erigon_docker_image_tag=$(echo ${ERIGON_VERSION} | sed 's/[@\/]/_/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

          # Parse ethereumjs
          echo "ethereumjs_repo=$(echo ${ETHEREUMJS_VERSION} | cut -d@ -f1)" >> $GITHUB_OUTPUT
          echo "ethereumjs_tag=$(echo ${ETHEREUMJS_VERSION} | cut -d@ -f2)" >> $GITHUB_OUTPUT
          echo "ethereumjs_docker_image_tag=$(echo ${ETHEREUMJS_VERSION} | sed 's/[@\/]/_/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

          # Parse nimbusel
          echo "nimbusel_repo=$(echo ${NIMBUSEL_VERSION} | cut -d@ -f1)" >> $GITHUB_OUTPUT
          echo "nimbusel_tag=$(echo ${NIMBUSEL_VERSION} | cut -d@ -f2)" >> $GITHUB_OUTPUT
          echo "nimbusel_docker_image_tag=$(echo ${NIMBUSEL_VERSION} | sed 's/[@\/]/_/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

          # Parse hive
          echo "hive_repo=$(echo ${HIVE_VERSION:-$HIVE_DEFAULT} | cut -d@ -f1)" >> $GITHUB_OUTPUT
          echo "hive_tag=$(echo ${HIVE_VERSION:-$HIVE_DEFAULT} | cut -d@ -f2)" >> $GITHUB_OUTPUT
        env:
          HIVE_VERSION: ${{ inputs.hive_version }}
      - id: client_config
        run: |
          cat << 'EOF' >> $GITHUB_OUTPUT
          config<<ENDCONFIG
          - client: go-ethereum
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.geth_repo }}
              tag: ${{ steps.parse.outputs.geth_tag }}
              GOPROXY: ${{ env.GOPROXY }}
          - client: besu
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.besu_repo }}
              tag: ${{ steps.parse.outputs.besu_tag }}
          - client: reth
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.reth_repo }}
              tag: ${{ steps.parse.outputs.reth_tag }}
          - client: nethermind
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.nethermind_repo }}
              tag: ${{ steps.parse.outputs.nethermind_tag }}
          - client: erigon
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.erigon_repo }}
              tag: ${{ steps.parse.outputs.erigon_tag }}
              GOPROXY: ${{ env.GOPROXY }}
          - client: ethereumjs
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.ethereumjs_repo }}
              tag: ${{ steps.parse.outputs.ethereumjs_tag }}
          - client: nimbus-el
            nametag: default
            dockerfile: git
            build_args:
              github: ${{ steps.parse.outputs.nimbusel_repo }}
              tag: ${{ steps.parse.outputs.nimbusel_tag }}
          ENDCONFIG
          EOF

  test:
    timeout-minutes: 1440 # 24 hours
    needs: prepare
    runs-on: >-
      ${{
        matrix.simulator == 'ethereum/consensus' && 'self-hosted-ghr-size-m-x64' ||
        matrix.simulator == 'ethereum/engine' && 'self-hosted-ghr-size-m-x64' ||
        matrix.simulator == 'ethereum/rpc-compat' && 'ubuntu-latest' ||
        contains(matrix.simulator, 'ethereum/eest/') && 'self-hosted-ghr-size-m-x64' ||
        'ubuntu-latest'
      }}
    concurrency:
      group: >-
        ${{ github.head_ref || inputs }}-${{ matrix.client }}-${{ matrix.simulator }}
    strategy:
      fail-fast: false
      matrix:
        client: >-
          ${{
            fromJSON(format('[{0}]', inputs.client || '
              "besu",
              "erigon",
              "ethereumjs",
              "go-ethereum",
              "nethermind",
              "nimbus-el",
              "reth"
          '))}}
        simulator: >-
          ${{
            fromJSON(format('[{0}]', inputs.simulator || '
              "devp2p",
              "ethereum/consensus",
              "ethereum/eest/consume-engine",
              "ethereum/eest/consume-rlp",
              "ethereum/engine",
              "ethereum/graphql",
              "ethereum/rpc-compat",
              "ethereum/sync"
          '))}}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: ethpandaops/actions/docker-login@a91b7a8dd6a264f5e845ac2aa52d2d6f24e6d01d
        with:
          username: ethpandaops
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: ethpandaops/hive-github-action/helpers/self-hosted-runner-dependencies@299a5ffad55b067d7dd26ab9fe40ff999cbb5029 # v0.3.0
        if: runner.environment != 'github-hosted'

      - uses: ethpandaops/hive-github-action@299a5ffad55b067d7dd26ab9fe40ff999cbb5029 # v0.3.0
        with:
          hive_repository: ${{ needs.prepare.outputs.hive_repo }}
          hive_version: ${{ needs.prepare.outputs.hive_tag }}
          client: ${{ matrix.client }}
          simulator: ${{ matrix.simulator }}
          client_config: ${{ needs.prepare.outputs.client_config }}
          extra_flags: >-
            ${{ env.GLOBAL_EXTRA_FLAGS }}
            ${{ (matrix.client == 'erigon' && matrix.simulator == 'ethereum/eest/consume-rlp') && '--client.checktimelimit=21600s' || '' }}
            ${{ (matrix.client == 'erigon' && matrix.simulator == 'ethereum/eest/consume-engine') && '--sim.parallelism=1' || '' }}
            ${{ matrix.simulator == 'ethereum/rpc-compat' && env.RPC_COMPAT_FLAGS || '' }}
            ${{ matrix.simulator == 'ethereum/consensus' && env.CONSENSUS_FLAGS || '' }}
            ${{ matrix.simulator == 'ethereum/eest/consume-engine' && env.EEST_ENGINE_FLAGS || '' }}
            ${{ matrix.simulator == 'ethereum/eest/consume-rlp' && env.EEST_RLP_FLAGS || '' }}
          s3_upload: true
          s3_bucket: ${{ env.S3_BUCKET }}
          s3_path: ${{ env.S3_PATH }}
          s3_public_url: ${{ env.S3_PUBLIC_URL }}
          rclone_config: ${{ secrets.HIVE_RCLONE_CONFIG }}
          rclone_version: ${{ env.INSTALL_RCLONE_VERSION }}
          workflow_artifact_upload: true
          website_upload: true
